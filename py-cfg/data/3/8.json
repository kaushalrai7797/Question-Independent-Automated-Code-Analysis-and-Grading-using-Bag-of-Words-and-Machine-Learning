{"nodes": [{"string": "T;", "links": [], "variables": [], "ids": [], "nodeId": 0, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["T"], "ids": [], "nodeId": 1, "featuresSelf": ["in", "&&&&&&&++++++!%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)"], "operators": ["&&&&&&&++++++!"], "constants": ["%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)"], "features": ["&&&&&&&++++++!%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)", "in"]}, {"string": " while ( T -- )", "links": [1], "variables": ["T"], "ids": [], "nodeId": 2, "featuresSelf": ["cn", "--"], "operators": ["--"], "constants": [], "features": ["--", "&&&&&&&++++++!%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)", "cn", "in"]}, {"string": "scanf", "links": [], "variables": ["N"], "ids": ["lp"], "nodeId": 3, "featuresSelf": ["in", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)"], "operators": ["&&&&&&&++++++!--"], "constants": ["%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)"], "features": ["&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "in"]}, {"string": " i <= N", "links": [3], "variables": ["i", "N"], "ids": ["lp"], "nodeId": 4, "featuresSelf": ["<=1"], "operators": ["<="], "constants": ["1"], "features": ["<=1", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "in"]}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 5, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": " str [ i ] + 1", "links": [4], "variables": ["i", "str"], "ids": ["lp", "lp"], "nodeId": 6, "featuresSelf": ["in", "++%s", "++1", "+%s", "+1"], "operators": ["++", "+"], "constants": ["%s", "1"], "features": ["+1", "++%s", "in", "+%s", "<=1", "++1"]}, {"string": " N <= 4", "links": [4], "variables": ["N"], "ids": ["lp"], "nodeId": 7, "featuresSelf": ["icn", "<=4"], "operators": ["<="], "constants": ["4"], "features": ["<=1", "<=4", "icn", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "in"]}, {"string": " i <= N", "links": [6, 7], "variables": ["i", "N"], "ids": ["lp", "if"], "nodeId": 8, "featuresSelf": ["<=1"], "operators": ["<="], "constants": ["1"], "features": ["icn", "++%s", "+%s", "<=1", "<=4", "+1", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "in", "++1"]}, {"string": null, "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 9, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": null, "links": [8], "variables": ["i"], "ids": ["lp", "if", "lp"], "nodeId": 10, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["+1", "++%s", "in", "++", "<=1", "++1", "+%s"]}, {"string": " str [ i ] + 1", "links": [6, 10], "variables": ["str", "i"], "ids": ["lp", "if", "lp"], "nodeId": 11, "featuresSelf": ["out", "+%s\\n", "+1"], "operators": ["+"], "constants": ["%s\\n", "1"], "features": ["++%s", "+%s\\n", "<=1", "++1", "++", "+1", "in", "+%s", "out"]}, {"string": " i <= 4", "links": [11, 8], "variables": ["i", "N"], "ids": ["lp", "if"], "nodeId": 12, "featuresSelf": ["+1", "+4", "<=1", "<=4"], "operators": ["+", "<="], "constants": ["1", "4"], "features": ["++1", "in", "+%s", "out", "icn", "++%s", "+%s\\n", "<=1", "<=4", "++", "+1", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "+4"]}, {"string": null, "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 13, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": null, "links": [12], "variables": ["i"], "ids": ["lp", "if", "lp"], "nodeId": 14, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["++%s", "++", "<=1", "in", "<=4", "++1", "+%s\\n", "+1", "+4", "+%s", "out"]}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "if", "lp"], "nodeId": 15, "featuresSelf": ["out", "AAAA\\n"], "operators": [], "constants": ["AAAA\\n"], "features": ["AAAA\\n", "out"]}, {"string": " continue", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 16, "featuresSelf": ["continue"], "operators": [], "constants": [], "features": ["continue"]}, {"string": " i <= N", "links": [14, 12], "variables": ["i", "N"], "ids": ["lp"], "nodeId": 17, "featuresSelf": ["-3", "<=3"], "operators": ["-", "<="], "constants": ["3"], "features": ["in", "icn", "++%s", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "++", "<=1", "<=3", "<=4", "++1", "+%s\\n", "+1", "-3", "+4", "+%s", "out"]}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 18, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": null, "links": [17], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 19, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["in", "++%s", "++", "<=1", "<=3", "++1", "+%s\\n", "+1", "<=4", "-3", "+4", "+%s", "out"]}, {"string": " 4 - N + i", "links": [21, 22], "variables": [], "ids": ["lp", "lp"], "nodeId": 20, "featuresSelf": ["+"], "operators": ["+"], "constants": [], "features": ["-4", "+"]}, {"string": null, "links": [20], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 21, "featuresSelf": [], "operators": [], "constants": [], "features": ["in", "++%s", "++", "<=1", "+", "<=3", "++1", "+%s\\n", "+1", "<=4", "-3", "+4", "+%s", "out"]}, {"string": " 4 - N", "links": [17], "variables": ["N"], "ids": ["lp", "lp"], "nodeId": 22, "featuresSelf": ["-4"], "operators": ["-"], "constants": ["4"], "features": ["in", "icn", "<=1", "<=3", "<=4", "-4", "+1", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "+4", "-3"]}, {"string": "flag;", "links": [], "variables": ["flag"], "ids": ["lp"], "nodeId": 23, "featuresSelf": ["0"], "operators": [], "constants": ["0"], "features": ["0"]}, {"string": " a + 1 + N", "links": [25, 26, 20], "variables": ["a"], "ids": ["lp"], "nodeId": 24, "featuresSelf": ["+1", "+1"], "operators": ["+", "+"], "constants": ["1"], "features": ["+1", "+"]}, {"string": null, "links": [22], "variables": ["N"], "ids": ["lp"], "nodeId": 25, "featuresSelf": [], "operators": [], "constants": [], "features": ["in", "icn", "<=1", "<=3", "<=4", "-4", "+1", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "+4", "-3"]}, {"string": " a + 1", "links": [24], "variables": ["a", "next_permutation"], "ids": ["lp"], "nodeId": 26, "featuresSelf": ["+1"], "operators": ["+"], "constants": ["1"], "features": ["+1"]}, {"string": " i <= N", "links": [21, 25], "variables": ["i", "N"], "ids": ["lp"], "nodeId": 27, "featuresSelf": ["<=1"], "operators": ["<="], "constants": ["1"], "features": ["-3", "++1", "+%s\\n", "in", "+%s", "out", "icn", "++%s", "++", "<=1", "<=3", "<=4", "-4", "+1", "&&&&&&&++++++!--%d,&x)#defineSca2(x,y)scanf(%d%d,&x,&y)#defineSca3(x,y,z)scanf(%d%d%d,&x,&y,&z)#defineScl(x)scanf(%lld,&x)#definePri(x)printf(%d\\n,x)#definePrl(x)printf(%lld\\n,x)#defineCLR(u)for(inti=0i<=Ni++)u[i].clear()#defineLLlonglong#defineULLunsignedlonglong#definempmake_pair#definePIIpair<int,int>#definePILpair<int,longlong>#definePLLpair<longlong,longlong>#definepbpush_back#definefifirst#definesesecondtypedefvector<int>VIconstdoubleeps=1e-9constintmaxn=1e6+10constLLINF=3e18constintmod=1e9+7intNcharMAP[5][5]charstr[50][5]inta[35]boolfind(charx[]){for(inti=1i<=4i++){if(MAP[i][1]==x[1]&&MAP[i][2]==x[2]&&MAP[i][3]==x[3]&&MAP[i][4]==x[4])returntrueif(MAP[i][1]==x[4]&&MAP[i][2]==x[3]&&MAP[i][3]==x[2]&&MAP[i][4]==x[1])returntrueif(MAP[1][i]==x[1]&&MAP[2][i]==x[2]&&MAP[3][i]==x[3]&&MAP[4][i]==x[4])returntrueif(MAP[1][i]==x[4]&&MAP[2][i]==x[3]&&MAP[3][i]==x[2]&&MAP[4][i]==x[1])returntrue}returnfalse}boolcheck(){for(inti=1i<=Ni++){if(!find(str[i]))returnfalse}returntrue}intmain(){intTSca(T)while(T--){Sca(N)", "+4"]}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 28, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": null, "links": [27], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 29, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["in", "++%s", "++", "<=1", "<=3", "++1", "+%s\\n", "+1", "<=4", "-3", "+4", "+%s", "out"]}, {"string": "Implicit Cast", "links": [26, 29], "variables": ["a", "i"], "ids": ["lp", "lp"], "nodeId": 30, "featuresSelf": ["icn"], "operators": [], "constants": [], "features": ["in", "icn", "++%s", "++", "<=1", "<=3", "++1", "+%s\\n", "+1", "<=4", "-3", "+4", "+%s", "out"]}, {"string": " j <= 4", "links": [], "variables": ["j"], "ids": ["lp", "lp", "if"], "nodeId": 31, "featuresSelf": ["<=1", "<=4"], "operators": ["<="], "constants": ["1", "4"], "features": ["<=1", "<=4"]}, {"string": null, "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 32, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": " MAP [ a [ i ] ] [ j ] = str [ i ] [ j ]", "links": [31, 11, 30], "variables": ["j", "str", "i"], "ids": ["lp", "lp", "if", "lp"], "nodeId": 33, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["in", "icn", "++%s", "++", "<=1", "<=3", "<=4", "++1", "+%s\\n", "+1", "-3", "+4", "+%s", "out"]}, {"string": "Implicit Cast", "links": [], "variables": [], "ids": ["lp"], "nodeId": 34, "featuresSelf": ["icn"], "operators": [], "constants": [], "features": ["icn"]}, {"string": " i <= 4", "links": [33], "variables": ["i"], "ids": ["lp", "if"], "nodeId": 35, "featuresSelf": ["<=1", "<=4"], "operators": ["<="], "constants": ["1", "4"], "features": ["++1", "in", "+%s", "out", "icn", "++%s", "++", "<=1", "<=3", "<=4", "+%s\\n", "+1", "-3", "+4"]}, {"string": null, "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 36, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": null, "links": [35], "variables": ["i"], "ids": ["lp", "if", "lp"], "nodeId": 37, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["in", "icn", "++%s", "++", "<=1", "<=3", "++1", "+%s\\n", "+1", "<=4", "-3", "+4", "+%s", "out"]}, {"string": " j <= 4", "links": [33], "variables": ["j"], "ids": ["lp", "if", "lp"], "nodeId": 38, "featuresSelf": ["<=1", "<=4"], "operators": ["<="], "constants": ["1", "4"], "features": ["++", "<=1", "<=4"]}, {"string": null, "links": [], "variables": [], "ids": ["lp", "if", "lp"], "nodeId": 39, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": ["cn"]}, {"string": null, "links": [38], "variables": ["j"], "ids": ["lp", "if", "lp", "lp"], "nodeId": 40, "featuresSelf": ["++"], "operators": ["++"], "constants": [], "features": ["++", "<=1", "<=4"]}, {"string": " flag = 1", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 41, "featuresSelf": ["1"], "operators": [], "constants": ["1"], "features": ["1"]}, {"string": " break", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 42, "featuresSelf": ["break"], "operators": [], "constants": [], "features": ["break"]}, {"string": " ! flag", "links": [41], "variables": ["flag"], "ids": ["lp"], "nodeId": 43, "featuresSelf": ["icn", "!"], "operators": ["!"], "constants": [], "features": ["!", "1", "icn", "0"]}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 44, "featuresSelf": ["out", "grid\\nsnot\\nposs\\nible\\n"], "operators": [], "constants": ["grid\\nsnot\\nposs\\nible\\n"], "features": ["grid\\nsnot\\nposs\\nible\\n", "out"]}, {"string": " return 0", "links": [], "variables": [], "ids": [], "nodeId": 45, "featuresSelf": ["return", "0"], "operators": [], "constants": ["0"], "features": ["0", "return"]}]}
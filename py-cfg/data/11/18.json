{"nodes": [{"string": " * _p -> _p ++ = _c", "links": [], "variables": ["_c", "_p", "__swbuf"], "ids": [], "nodeId": 0, "featuresSelf": ["icn", "return", "return"], "operators": ["||", "&&", "!=", ">=", ">=", "--", "++", "++"], "constants": ["'\\n'", "0"], "features": []}, {"string": "T;", "links": [], "variables": [], "ids": [], "nodeId": 1, "featuresSelf": [], "operators": [], "constants": ["1", "0", "0"], "features": []}, {"string": " n = N", "links": [], "variables": ["N"], "ids": [], "nodeId": 2, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["T"], "ids": [], "nodeId": 3, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d"], "features": []}, {"string": " while ( T -- )", "links": [], "variables": ["T"], "ids": [], "nodeId": 4, "featuresSelf": ["cn", "loop"], "operators": ["--"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["N", "K", "S"], "ids": ["lp"], "nodeId": 5, "featuresSelf": ["in"], "operators": ["&", "&", "&"], "constants": ["%d%d%d"], "features": []}, {"string": " K > N", "links": [], "variables": ["N", "K"], "ids": ["lp"], "nodeId": 6, "featuresSelf": ["icn"], "operators": [">"], "constants": [], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 7, "featuresSelf": ["out"], "operators": [], "constants": ["-1"], "features": []}, {"string": " break", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 8, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " flag = 1", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 9, "featuresSelf": [], "operators": [], "constants": ["1"], "features": []}, {"string": " i <= S", "links": [], "variables": ["S", "i"], "ids": ["lp"], "nodeId": 10, "featuresSelf": [], "operators": ["<="], "constants": ["1"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 11, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 12, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " i % 7 == 0", "links": [14, 15], "variables": [], "ids": ["lp", "lp"], "nodeId": 13, "featuresSelf": ["icn"], "operators": ["&&", "=="], "constants": [], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp", "lp"], "nodeId": 14, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": " stock < K", "links": [], "variables": ["i", "K", "stock"], "ids": ["lp", "lp"], "nodeId": 15, "featuresSelf": [], "operators": ["%", "<"], "constants": ["7"], "features": []}, {"string": " stock >= K", "links": [], "variables": ["K", "stock"], "ids": ["lp", "lp", "if"], "nodeId": 16, "featuresSelf": ["icn"], "operators": [">="], "constants": [], "features": []}, {"string": " stock -= K", "links": [], "variables": ["K", "stock"], "ids": ["lp", "lp", "if", "if"], "nodeId": 17, "featuresSelf": [], "operators": ["-="], "constants": [], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 18, "featuresSelf": ["out"], "operators": [], "constants": ["-1"], "features": []}, {"string": " flag = 1", "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 19, "featuresSelf": [], "operators": [], "constants": ["1"], "features": []}, {"string": " stock < K", "links": [], "variables": ["K", "stock"], "ids": ["lp", "lp", "if"], "nodeId": 20, "featuresSelf": ["break", "icn"], "operators": ["<"], "constants": [], "features": []}, {"string": " stock >= K", "links": [], "variables": ["K", "stock"], "ids": ["lp", "lp", "if"], "nodeId": 21, "featuresSelf": ["icn"], "operators": [">="], "constants": [], "features": []}, {"string": " stock -= K", "links": [], "variables": ["K", "stock"], "ids": ["lp", "lp", "if", "if"], "nodeId": 22, "featuresSelf": [], "operators": ["-="], "constants": [], "features": []}, {"string": " stock += N", "links": [], "variables": ["N", "stock"], "ids": ["lp", "lp", "if"], "nodeId": 23, "featuresSelf": [], "operators": ["+="], "constants": [], "features": []}, {"string": " buy ++", "links": [], "variables": ["buy"], "ids": ["lp", "lp", "if"], "nodeId": 24, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " stock + ( n - K )", "links": [26, 27], "variables": [], "ids": ["lp", "lp"], "nodeId": 25, "featuresSelf": [], "operators": ["+"], "constants": [], "features": []}, {"string": " n - K", "links": [], "variables": ["K", "n"], "ids": ["lp", "lp"], "nodeId": 26, "featuresSelf": [], "operators": ["-"], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["stock"], "ids": ["lp", "lp"], "nodeId": 27, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " flag == 0", "links": [], "variables": ["flag"], "ids": ["lp"], "nodeId": 28, "featuresSelf": ["icn"], "operators": ["=="], "constants": ["0"], "features": []}, {"string": "printf", "links": [], "variables": ["buy"], "ids": ["lp", "if"], "nodeId": 29, "featuresSelf": ["out"], "operators": [], "constants": ["%d"], "features": []}, {"string": " return 0", "links": [], "variables": [], "ids": [], "nodeId": 30, "featuresSelf": ["return"], "operators": [], "constants": ["0"], "features": []}], "features": [{"controlContextEC": [":3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", ":3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", ":100", ":", ":1;&;%d", ":1;--;", "lp:3;&;3;&;3;&;%d%d%d", "lp:2;>;", "lpif:-1", "lpif:", "lpif:1", "lp:2;<=;1", "lp:", "lplp:1;++;", "lplp:0;&&;0;==;", "lplp:0", "lplp:3;%;3;<;7", "lplpif:2;>=;", "lplpifif:2;-=;", "lplpif:-1", "lplpif:1", "lplpif:2;<;", "lplpif:2;>=;", "lplpifif:2;-=;", "lplpif:2;+=;", "lplpif:1;++;", "lplp:0;+;", "lplp:2;-;", "lplp:", "lp:1;==;0", "lpif:%d", ":0"], "expr": ["3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", "3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", "100", "", "1;&;%d", "1;--;", "3;&;3;&;3;&;%d%d%d", "2;>;", "-1", "", "1", "2;<=;1", "", "1;++;", "0;&&;0;==;", "0", "3;%;3;<;7", "2;>=;", "2;-=;", "-1", "1", "2;<;", "2;>=;", "2;-=;", "2;+=;", "1;++;", "0;+;", "2;-;", "", "1;==;0", "%d", "0"], "basic": ["||", "&&", "!=", ">=", ">=", "--", "++", "++", "'\\n'", "0", "||", "&&", "!=", ">=", ">=", "--", "++", "++", "'\\n'", "0", "1", "0", "0", "&", "%d", "--", "loop", "&", "&", "&", "%d%d%d", ">", "-1", "1", "<=", "1", "loop", "++", "&&", "==", "0", "%", "<", "7", ">=", "-=", "-1", "1", "<", ">=", "-=", "+=", "++", "+", "-", "==", "0", "%d", "0"], "exprDepend": ["3;%;3;<;7#0;+;", "2;>=;#0;+;", "2;-=;#0;+;", "2;<;#0;+;", "2;>=;#0;+;", "2;-=;#0;+;", "2;+=;#0;+;"], "controlContextBC": [":||", ":&&", ":!=", ":>=", ":>=", ":--", ":++", ":++", ":'\\n'", ":0", ":||", ":&&", ":!=", ":>=", ":>=", ":--", ":++", ":++", ":'\\n'", ":0", ":1", ":0", ":0", ":&", ":%d", ":--", "lp:&", "lp:&", "lp:&", "lp:%d%d%d", "lp:>", "lpif:-1", "lpif:1", "lp:<=", "lp:1", "lplp:++", "lplp:&&", "lplp:==", "lplp:0", "lplp:%", "lplp:<", "lplp:7", "lplpif:>=", "lplpifif:-=", "lplpif:-1", "lplpif:1", "lplpif:<", "lplpif:>=", "lplpifif:-=", "lplpif:+=", "lplpif:++", "lplp:+", "lplp:-", "lp:==", "lp:0", "lpif:%d", ":0"]}]}
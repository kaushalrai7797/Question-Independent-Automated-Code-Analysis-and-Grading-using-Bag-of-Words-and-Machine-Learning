{"nodes": [{"string": "t;", "links": [], "variables": [], "ids": [], "nodeId": 0, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["t"], "ids": [], "nodeId": 1, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d\\n"], "features": []}, {"string": " while ( t -- )", "links": [], "variables": ["t"], "ids": [], "nodeId": 2, "featuresSelf": ["cn", "loop"], "operators": ["--"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["n"], "ids": ["lp"], "nodeId": 3, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d"], "features": []}, {"string": "a;", "links": [], "variables": ["a", "n"], "ids": ["lp"], "nodeId": 4, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": " i < n", "links": [], "variables": ["n", "i"], "ids": ["lp"], "nodeId": 5, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 6, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 7, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["a", "i"], "ids": ["lp", "lp"], "nodeId": 8, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d"], "features": []}, {"string": "scanf", "links": [], "variables": ["m"], "ids": ["lp"], "nodeId": 9, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d"], "features": []}, {"string": "b;", "links": [], "variables": ["b", "m"], "ids": ["lp"], "nodeId": 10, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " i < m", "links": [], "variables": ["m", "i"], "ids": ["lp"], "nodeId": 11, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 12, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 13, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["b", "i"], "ids": ["lp", "lp"], "nodeId": 14, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d"], "features": []}, {"string": " i < n", "links": [], "variables": ["n", "i"], "ids": ["lp"], "nodeId": 15, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 16, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 17, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " a [ i ] == b [ 0 ]", "links": [], "variables": ["b", "a", "i"], "ids": ["lp", "lp"], "nodeId": 18, "featuresSelf": ["icn"], "operators": ["=="], "constants": ["0"], "features": []}, {"string": " j <= m", "links": [], "variables": ["i", "m", "j"], "ids": ["lp", "lp", "if"], "nodeId": 19, "featuresSelf": [], "operators": ["<="], "constants": [], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp", "lp", "if"], "nodeId": 20, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["j"], "ids": ["lp", "lp", "if", "lp"], "nodeId": 21, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " a [ j ] == b [ j - i ]", "links": [23, 24], "variables": [], "ids": ["lp", "lp", "if", "lp"], "nodeId": 22, "featuresSelf": ["icn"], "operators": ["=="], "constants": [], "features": []}, {"string": " j - i", "links": [], "variables": ["b", "i", "j"], "ids": ["lp", "lp", "if", "lp"], "nodeId": 23, "featuresSelf": [], "operators": ["-"], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["a", "j"], "ids": ["lp", "lp", "if", "lp"], "nodeId": 24, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " count ++", "links": [], "variables": ["count"], "ids": ["lp", "lp", "if", "lp", "if"], "nodeId": 25, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " break", "links": [], "variables": [], "ids": ["lp", "lp", "if", "lp"], "nodeId": 26, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " count == m", "links": [], "variables": ["m", "count"], "ids": ["lp", "lp", "if"], "nodeId": 27, "featuresSelf": ["icn"], "operators": ["=="], "constants": [], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "lp", "if", "if"], "nodeId": 28, "featuresSelf": ["out"], "operators": [], "constants": ["Yes\\n"], "features": []}, {"string": " break", "links": [], "variables": [], "ids": ["lp", "lp", "if", "if"], "nodeId": 29, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " count != m", "links": [], "variables": ["m", "count"], "ids": ["lp"], "nodeId": 30, "featuresSelf": ["icn"], "operators": ["!="], "constants": [], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 31, "featuresSelf": ["out"], "operators": [], "constants": ["No\\n"], "features": []}, {"string": " return 0", "links": [], "variables": [], "ids": [], "nodeId": 32, "featuresSelf": ["return"], "operators": [], "constants": ["0"], "features": []}], "features": [{"controlContextEC": [":", ":1;&;%d\\n", ":1;--;", "lp:1;&;%d", "lp:0", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;&;%d", "lp:1;&;%d", "lp:", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;&;%d", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:3;==;0", "lplpif:3;<=;", "lplpif:", "lplpiflp:1;++;", "lplpiflp:0;==;", "lplpiflp:3;-;", "lplpiflp:", "lplpiflpif:1;++;", "lplpiflp:", "lplpif:2;==;", "lplpifif:Yes\\n", "lplpifif:", "lp:2;!=;", "lpif:No\\n", ":0"], "expr": ["", "1;&;%d\\n", "1;--;", "1;&;%d", "0", "2;<;0", "", "1;++;", "2;&;%d", "1;&;%d", "", "2;<;0", "", "1;++;", "2;&;%d", "2;<;0", "", "1;++;", "3;==;0", "3;<=;", "", "1;++;", "0;==;", "3;-;", "", "1;++;", "", "2;==;", "Yes\\n", "", "2;!=;", "No\\n", "0"], "basic": ["&", "%d\\n", "--", "loop", "&", "%d", "0", "<", "0", "loop", "++", "&", "%d", "&", "%d", "<", "0", "loop", "++", "&", "%d", "<", "0", "loop", "++", "==", "0", "<=", "loop", "++", "==", "-", "++", "==", "Yes\\n", "!=", "No\\n", "0"], "exprDepend": ["2;<;0#2;<;0", "1;++;#2;<;0", "2;&;%d#2;<;0", "2;<;0#2;<;0", "1;++;#2;<;0", "2;&;%d#2;<;0", "2;<;0#2;<;0", "1;++;#2;<;0", "2;&;%d#2;<;0"], "controlContextBC": [":&", ":%d\\n", ":--", "lp:&", "lp:%d", "lp:0", "lp:<", "lp:0", "lplp:++", "lplp:&", "lplp:%d", "lp:&", "lp:%d", "lp:<", "lp:0", "lplp:++", "lplp:&", "lplp:%d", "lp:<", "lp:0", "lplp:++", "lplp:==", "lplp:0", "lplpif:<=", "lplpiflp:++", "lplpiflp:==", "lplpiflp:-", "lplpiflpif:++", "lplpif:==", "lplpifif:Yes\\n", "lp:!=", "lpif:No\\n", ":0"]}]}
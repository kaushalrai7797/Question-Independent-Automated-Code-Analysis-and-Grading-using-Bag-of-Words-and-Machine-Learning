{"nodes": [{"string": " * _p -> _p ++ = _c", "links": [], "variables": ["_c", "_p", "__swbuf"], "ids": [], "nodeId": 0, "featuresSelf": ["icn", "return", "return"], "operators": ["||", "&&", "!=", ">=", ">=", "--", "++", "++"], "constants": ["'\\n'", "0"], "features": []}, {"string": "t;", "links": [], "variables": [], "ids": [], "nodeId": 1, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": "scanf", "links": [], "variables": ["t"], "ids": [], "nodeId": 2, "featuresSelf": ["in"], "operators": ["&"], "constants": ["\\n%d"], "features": []}, {"string": " i < t", "links": [], "variables": ["i", "t"], "ids": [], "nodeId": 3, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": [], "nodeId": 4, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp"], "nodeId": 5, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["n"], "ids": ["lp"], "nodeId": 6, "featuresSelf": ["in"], "operators": ["&"], "constants": ["\\n%d"], "features": []}, {"string": "a;", "links": [], "variables": ["a", "n"], "ids": ["lp"], "nodeId": 7, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " i < n", "links": [], "variables": ["i", "n"], "ids": ["lp"], "nodeId": 8, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 9, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 10, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["a", "i"], "ids": ["lp", "lp"], "nodeId": 11, "featuresSelf": ["in"], "operators": ["&"], "constants": ["\\n%d"], "features": []}, {"string": "scanf", "links": [], "variables": ["m"], "ids": ["lp"], "nodeId": 12, "featuresSelf": ["in"], "operators": ["&"], "constants": ["\\n%d"], "features": []}, {"string": "b;", "links": [], "variables": ["b", "m"], "ids": ["lp"], "nodeId": 13, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " i < m", "links": [], "variables": ["i", "m"], "ids": ["lp"], "nodeId": 14, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 15, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 16, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["b", "i"], "ids": ["lp", "lp"], "nodeId": 17, "featuresSelf": ["in"], "operators": ["&"], "constants": ["\\n%d"], "features": []}, {"string": " i < n", "links": [], "variables": ["i", "n"], "ids": ["lp"], "nodeId": 18, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 19, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp", "lp"], "nodeId": 20, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " j < m", "links": [], "variables": ["j", "m"], "ids": ["lp", "lp"], "nodeId": 21, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp", "lp"], "nodeId": 22, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["j"], "ids": ["lp", "lp", "lp"], "nodeId": 23, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " a [ i ] == b [ j ]", "links": [], "variables": ["b", "j", "a", "i"], "ids": ["lp", "lp", "lp"], "nodeId": 24, "featuresSelf": ["icn"], "operators": ["=="], "constants": [], "features": []}, {"string": " sum ++", "links": [], "variables": ["sum"], "ids": ["lp", "lp", "lp", "if"], "nodeId": 25, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " break", "links": [], "variables": [], "ids": ["lp", "lp", "lp", "if"], "nodeId": 26, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " m == sum", "links": [], "variables": ["sum", "m"], "ids": ["lp"], "nodeId": 27, "featuresSelf": ["icn"], "operators": ["=="], "constants": [], "features": []}, {"string": "printf", "links": [], "variables": [], "ids": ["lp", "if"], "nodeId": 28, "featuresSelf": ["out", "out"], "operators": [], "constants": ["\\nYes", "\\nNo"], "features": []}, {"string": " return 0", "links": [], "variables": [], "ids": [], "nodeId": 29, "featuresSelf": ["return"], "operators": [], "constants": ["0"], "features": []}], "features": [{"controlContextEC": [":3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", ":3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", ":0", ":1;&;\\n%d", ":2;<;0", ":", "lp:1;++;", "lp:1;&;\\n%d", "lp:", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;&;\\n%d", "lp:1;&;\\n%d", "lp:", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;&;\\n%d", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;<;0", "lplp:", "lplplp:1;++;", "lplplp:4;==;", "lplplpif:1;++;", "lplplpif:", "lp:2;==;", "lpif:\\nYes\\nNo", ":0"], "expr": ["3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", "3;||;3;&&;3;!=;3;>=;3;>=;3;--;3;++;3;++;'\\n'0", "0", "1;&;\\n%d", "2;<;0", "", "1;++;", "1;&;\\n%d", "", "2;<;0", "", "1;++;", "2;&;\\n%d", "1;&;\\n%d", "", "2;<;0", "", "1;++;", "2;&;\\n%d", "2;<;0", "", "1;++;", "2;<;0", "", "1;++;", "4;==;", "1;++;", "", "2;==;", "\\nYes\\nNo", "0"], "basic": ["||", "&&", "!=", ">=", ">=", "--", "++", "++", "'\\n'", "0", "||", "&&", "!=", ">=", ">=", "--", "++", "++", "'\\n'", "0", "0", "&", "\\n%d", "<", "0", "loop", "++", "&", "\\n%d", "<", "0", "loop", "++", "&", "\\n%d", "&", "\\n%d", "<", "0", "loop", "++", "&", "\\n%d", "<", "0", "loop", "++", "<", "0", "loop", "++", "==", "++", "==", "\\nYes", "\\nNo", "0"], "exprDepend": [], "controlContextBC": [":||", ":&&", ":!=", ":>=", ":>=", ":--", ":++", ":++", ":'\\n'", ":0", ":||", ":&&", ":!=", ":>=", ":>=", ":--", ":++", ":++", ":'\\n'", ":0", ":0", ":&", ":\\n%d", ":<", ":0", "lp:++", "lp:&", "lp:\\n%d", "lp:<", "lp:0", "lplp:++", "lplp:&", "lplp:\\n%d", "lp:&", "lp:\\n%d", "lp:<", "lp:0", "lplp:++", "lplp:&", "lplp:\\n%d", "lp:<", "lp:0", "lplp:++", "lplp:<", "lplp:0", "lplplp:++", "lplplp:==", "lplplpif:++", "lp:==", "lpif:\\nYes", "lpif:\\nNo", ":0"]}]}
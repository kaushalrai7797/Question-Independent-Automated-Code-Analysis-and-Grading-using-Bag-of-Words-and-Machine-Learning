{"nodes": [{"string": "n;", "links": [], "variables": [], "ids": [], "nodeId": 0, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["n"], "ids": [], "nodeId": 1, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": " i < n ;", "links": [], "variables": ["i", "n"], "ids": [], "nodeId": 2, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": [], "nodeId": 3, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["i"], "ids": ["lp"], "nodeId": 4, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "j;", "links": [], "variables": [], "ids": ["lp"], "nodeId": 5, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["j"], "ids": ["lp"], "nodeId": 6, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": "a;", "links": [], "variables": ["a", "j"], "ids": ["lp"], "nodeId": 7, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " h < j ;", "links": [], "variables": ["h", "j"], "ids": ["lp"], "nodeId": 8, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 9, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["h"], "ids": ["lp", "lp"], "nodeId": 10, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["a", "h"], "ids": ["lp", "lp"], "nodeId": 11, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": "scanf", "links": [], "variables": ["k"], "ids": ["lp"], "nodeId": 12, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": "b;", "links": [], "variables": ["b", "k"], "ids": ["lp"], "nodeId": 13, "featuresSelf": [], "operators": [], "constants": [], "features": []}, {"string": " h < k ;", "links": [], "variables": ["h", "k"], "ids": ["lp"], "nodeId": 14, "featuresSelf": [], "operators": ["<"], "constants": ["0"], "features": []}, {"string": null, "links": [], "variables": [], "ids": ["lp"], "nodeId": 15, "featuresSelf": ["cn"], "operators": [], "constants": [], "features": []}, {"string": null, "links": [], "variables": ["h"], "ids": ["lp", "lp"], "nodeId": 16, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": "scanf", "links": [], "variables": ["b", "h"], "ids": ["lp", "lp"], "nodeId": 17, "featuresSelf": ["in"], "operators": ["&"], "constants": ["%d,"], "features": []}, {"string": "l;", "links": [], "variables": ["l"], "ids": ["lp"], "nodeId": 18, "featuresSelf": [], "operators": [], "constants": ["0", "0", "0"], "features": []}, {"string": " h < j )", "links": [], "variables": ["j", "h"], "ids": ["lp"], "nodeId": 19, "featuresSelf": ["cn", "loop"], "operators": ["<"], "constants": [], "features": []}, {"string": " l = 0 ;", "links": [], "variables": [], "ids": ["lp", "lp"], "nodeId": 20, "featuresSelf": [], "operators": [], "constants": ["0"], "features": []}, {"string": " l < k )", "links": [], "variables": ["k", "l"], "ids": ["lp", "lp"], "nodeId": 21, "featuresSelf": ["cn", "loop"], "operators": ["<"], "constants": [], "features": []}, {"string": " a [ h ] == b [ l ] )", "links": [], "variables": ["b", "l", "a", "h"], "ids": ["lp", "lp", "lp"], "nodeId": 22, "featuresSelf": ["icn"], "operators": ["=="], "constants": [], "features": []}, {"string": " count ++ ;", "links": [], "variables": ["count"], "ids": ["lp", "lp", "lp", "if"], "nodeId": 23, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " h ++ ;", "links": [], "variables": ["h"], "ids": ["lp", "lp", "lp", "if"], "nodeId": 24, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " l ++ ;", "links": [], "variables": ["l"], "ids": ["lp", "lp", "lp", "if"], "nodeId": 25, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " break ;", "links": [], "variables": [], "ids": ["lp", "lp", "lp"], "nodeId": 26, "featuresSelf": ["break"], "operators": [], "constants": [], "features": []}, {"string": " h ++ ;", "links": [], "variables": ["h"], "ids": ["lp", "lp"], "nodeId": 27, "featuresSelf": [], "operators": ["++"], "constants": [], "features": []}, {"string": " count == k )", "links": [], "variables": ["k", "count"], "ids": ["lp"], "nodeId": 28, "featuresSelf": ["icn", "out", "out"], "operators": ["=="], "constants": ["Yes\\n)", "No\\n)"], "features": []}, {"string": " return 0 ;", "links": [], "variables": [], "ids": [], "nodeId": 29, "featuresSelf": ["return"], "operators": [], "constants": ["0"], "features": []}], "features": [{"controlContextEC": [":", ":1;&;%d,", ":2;<;0", ":", "lp:1;++;", "lp:", "lp:1;&;%d,", "lp:", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;&;%d,", "lp:1;&;%d,", "lp:", "lp:2;<;0", "lp:", "lplp:1;++;", "lplp:2;&;%d,", "lp:000", "lp:2;<;", "lplp:0", "lplp:2;<;", "lplplp:4;==;", "lplplpif:1;++;", "lplplpif:1;++;", "lplplpif:1;++;", "lplplp:", "lplp:1;++;", "lp:2;==;Yes\\n)No\\n)", ":0"], "expr": ["", "1;&;%d,", "2;<;0", "", "1;++;", "", "1;&;%d,", "", "2;<;0", "", "1;++;", "2;&;%d,", "1;&;%d,", "", "2;<;0", "", "1;++;", "2;&;%d,", "000", "2;<;", "0", "2;<;", "4;==;", "1;++;", "1;++;", "1;++;", "", "1;++;", "2;==;Yes\\n)No\\n)", "0"], "basic": ["&", "%d,", "<", "0", "loop", "++", "&", "%d,", "<", "0", "loop", "++", "&", "%d,", "&", "%d,", "<", "0", "loop", "++", "&", "%d,", "0", "0", "0", "<", "loop", "0", "<", "loop", "==", "++", "++", "++", "++", "==", "Yes\\n)", "No\\n)", "0"], "exprDepend": ["000#0"], "controlContextBC": [":&", ":%d,", ":<", ":0", "lp:++", "lp:&", "lp:%d,", "lp:<", "lp:0", "lplp:++", "lplp:&", "lplp:%d,", "lp:&", "lp:%d,", "lp:<", "lp:0", "lplp:++", "lplp:&", "lplp:%d,", "lp:0", "lp:0", "lp:0", "lp:<", "lplp:0", "lplp:<", "lplplp:==", "lplplpif:++", "lplplpif:++", "lplplpif:++", "lplp:++", "lp:==", "lp:Yes\\n)", "lp:No\\n)", ":0"]}]}